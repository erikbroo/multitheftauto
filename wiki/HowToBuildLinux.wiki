#summary Instructions on how to compile the Linux server.
#labels Featured

= Preparing your system =
In order to build the Multi Theft Auto dedicated server, you will have to set up your system with the correct libraries and tools. How these are installed depends on your distribution.

Our network module is distributed as precompiled binary. Distributing precompiled binary versions of software for GNU/Linux is not very common as software is often only installed through the distribution's own package manager or compiled on the spot. Because of this, we provide different versions of our binaries to ensure that it will run on a variety of systems. Each version has been compiled using a different configuration:
  * {{{glibc 2.9, dynamic libcurl, SSL support}}}
  * {{{glibc 2.3, static libcurl, no SSL support}}}

We strongly recommend you to pick the bottom version, since it is built using somewhat older libraries (instead of the state-of-the-art versions) and uses less dependencies, so it's very likely it will run on your system. All versions can be found on our [http://code.google.com/p/multitheftauto/downloads/list Download] page.

=== Debian Linux ===
_Includes derivative distributions such as Ubuntu_.
<br>

You will need the necessary build tools, headers and libraries, which are distributed through the following Debian packages (e.g. Debian Etch):
  * {{{build-essential}}}: contains the necessary tools, headers and libraries to build applications
  * {{{automake}}}: contains the automake tools
  * {{{libtool}}}: contains the libtool software required to build libraries
  * {{{subversion}}}: contains the [http://subversion.tigris.org/ Subversion] client used to check out our code repository
  * {{{libcurl3-dev}}}: contains the cURL library (version 3 without SSL support)
  * {{{libpcre3-dev}}}: contains the PCRE library (version 3)
  * {{{libsqlite3-dev}}}: contains the SQLite library (version 3)

To install these packages through {{{apt}}}, use the {{{apt-get install <package list>}}} command as in the following example (executed as root):
<code>
apt-get install build-essential automake libtool subversion libcurl3-dev libpcre3-dev libsqlite3-dev
</code>

=== Gentoo Linux ===

You will need the necessary build tools, headers and libraries. Because Gentoo's {{{portage}}} system is designed to compile any packages on your own system, the necessary build tools will have already been installed. This only leaves you to install the necessary libraries:
  * {{{sqlite}}}: contains the SQLite library
  * {{{subversion}}}: contains the [http://subversion.tigris.org/ Subversion] client used to check out our code repository
  * {{{curl}}}: contains the cURL library; to compile with SSL support, apply the {{{net-misc/curl ssl}}} USE flag

To compile and install these packages through {{{emerge}}}, use the {{{emerge -v <package list>}}} command. The {{{-v}}} option shows additional information and can be omitted. (If you want to use any USE flags, prepend emerge with {{{USE="use flags here"}}}. You can also use the {{{-pv}}} option to verify that you're using the correct flags.) Refer to the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=2&chap=1 Gentoo Handbook] or manual for more information on {{{emerge}}}.

Example:
<code>
emerge -v subversion sqlite
USE="net-misc/curl ssl" emerge -v curl
</code>

----

= General instructions =
=== Get the latest source code ===
<code>
svn checkout http://multitheftauto.googlecode.com/svn/trunk mtasvn/trunk
cd mtasvn/trunk</code>

=== Prepare the sparsehash library ===
<code>
cd vendor/sparsehash/current
autoreconf -fi
sh ./configure
make install
cd ../../..</code>

=== Prepare the lua library ===
<code>
cd vendor/lua/src
make linux
mkdir -p ../../../libs/lua
cp `*` ../../../libs/lua
cd ../../..</code>

=== Compile the server ===
<code>
autoreconf -fi
./configure
make</code>

=== Create the output directory ===
_This step will be ommitted in the near future_.
<code>
strip -g MTA10_Server/launcher/mta-server -o MTA10_Server/output/mta-server
strip -g MTA10_Server/core/.libs/libcore.so -o MTA10_Server/output/core.so
strip -g Shared/XML/.libs/libxml.so -o MTA10_Server/output/xmll.so
strip -g MTA10_Server/mods/deathmatch/.libs/libdeathmatch.so -o MTA10_Server/output/mods/deathmatch/deathmatch.so</code>

=== Run the server ===
<code>
cd MTA10_Server/ouput
./mta-server</code>

=== Important stuff ===
You will also have to:
 * download the latest net.so binary (from the [http://code.google.com/p/multitheftauto/downloads/list Downloads] page) and place it in the above output/ directory
 * copy the .conf and .xml files into output/mods/deathmatch
 * copy the necessary resources into output/mods/deathmatch/resources
<br><br>